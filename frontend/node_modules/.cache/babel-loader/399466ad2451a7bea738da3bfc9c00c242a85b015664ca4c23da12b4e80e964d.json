{"ast":null,"code":"var _jsxFileName = \"/Users/reineirduran/demo-components/src/components/Breadcrumbs.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Flex, Text, Link, Tooltip } from '@chakra-ui/react';\nimport { ChevronRightIcon } from '@chakra-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Breadcrumbs = ({\n  items\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const itemRefs = useRef([]);\n  const [shouldTruncate, setShouldTruncate] = useState({});\n  useEffect(() => {\n    const checkOverflow = () => {\n      if (containerRef.current) {\n        const container = containerRef.current;\n        let totalWidth = 0;\n        const newShouldTruncate = {};\n\n        // Calculate the width of all items\n        itemRefs.current.forEach((itemRef, index) => {\n          if (itemRef) {\n            const itemWidth = itemRef.offsetWidth;\n            const itemScrollWidth = itemRef.scrollWidth;\n            totalWidth += itemWidth;\n\n            // Check if this specific item is truncated\n            if (itemScrollWidth > itemWidth) {\n              newShouldTruncate[index] = true;\n            }\n          }\n        });\n\n        // If total width exceeds container width, start truncating from the end\n        if (totalWidth > container.offsetWidth) {\n          let availableWidth = container.offsetWidth;\n          for (let i = items.length - 1; i >= 0; i--) {\n            const itemRef = itemRefs.current[i];\n            if (itemRef) {\n              if (availableWidth - itemRef.offsetWidth < 0) {\n                newShouldTruncate[i] = true;\n              } else {\n                availableWidth -= itemRef.offsetWidth;\n              }\n            }\n          }\n        }\n        setShouldTruncate(newShouldTruncate);\n      }\n    };\n    checkOverflow();\n    window.addEventListener('resize', checkOverflow);\n    return () => window.removeEventListener('resize', checkOverflow);\n  }, [items]);\n  const renderItem = (item, index) => {\n    const content = /*#__PURE__*/_jsxDEV(Text, {\n      color: item.isCurrentPage ? \"gray.500\" : \"blue.500\",\n      fontWeight: \"500\",\n      fontSize: \"16px\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      flexShrink: 1,\n      minWidth: 0,\n      ref: el => itemRefs.current[index] = el,\n      as: item.isCurrentPage ? \"span\" : Link,\n      href: item.isCurrentPage ? undefined : item.href,\n      _hover: item.isCurrentPage ? undefined : {\n        textDecoration: 'underline'\n      },\n      children: item.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n    return shouldTruncate[index] ? /*#__PURE__*/_jsxDEV(Tooltip, {\n      label: item.label,\n      \"aria-label\": \"Full breadcrumb text\",\n      children: content\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this) : content;\n  };\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    align: \"center\",\n    ml: 4,\n    ref: containerRef,\n    overflow: \"hidden\",\n    children: items.map((item, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [index > 0 && /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n        mx: 2,\n        color: \"gray.500\",\n        flexShrink: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }, this), renderItem(item, index)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Breadcrumbs, \"IHn4zYWqQfzY8YeYc7ncrq4dLB4=\");\n_c = Breadcrumbs;\nexport default Breadcrumbs;\nvar _c;\n$RefreshReg$(_c, \"Breadcrumbs\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Flex","Text","Link","Tooltip","ChevronRightIcon","jsxDEV","_jsxDEV","Breadcrumbs","items","_s","containerRef","itemRefs","shouldTruncate","setShouldTruncate","checkOverflow","current","container","totalWidth","newShouldTruncate","forEach","itemRef","index","itemWidth","offsetWidth","itemScrollWidth","scrollWidth","availableWidth","i","length","window","addEventListener","removeEventListener","renderItem","item","content","color","isCurrentPage","fontWeight","fontSize","whiteSpace","overflow","textOverflow","flexShrink","minWidth","ref","el","as","href","undefined","_hover","textDecoration","children","label","fileName","_jsxFileName","lineNumber","columnNumber","align","ml","map","Fragment","mx","_c","$RefreshReg$"],"sources":["/Users/reineirduran/demo-components/src/components/Breadcrumbs.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Flex, Text, Link, Tooltip } from '@chakra-ui/react';\nimport { ChevronRightIcon } from '@chakra-ui/icons';\n\nconst Breadcrumbs = ({ items }) => {\n  const containerRef = useRef(null);\n  const itemRefs = useRef([]);\n  const [shouldTruncate, setShouldTruncate] = useState({});\n\n  useEffect(() => {\n    const checkOverflow = () => {\n      if (containerRef.current) {\n        const container = containerRef.current;\n        let totalWidth = 0;\n        const newShouldTruncate = {};\n\n        // Calculate the width of all items\n        itemRefs.current.forEach((itemRef, index) => {\n          if (itemRef) {\n            const itemWidth = itemRef.offsetWidth;\n            const itemScrollWidth = itemRef.scrollWidth;\n            totalWidth += itemWidth;\n            \n            // Check if this specific item is truncated\n            if (itemScrollWidth > itemWidth) {\n              newShouldTruncate[index] = true;\n            }\n          }\n        });\n\n        // If total width exceeds container width, start truncating from the end\n        if (totalWidth > container.offsetWidth) {\n          let availableWidth = container.offsetWidth;\n          for (let i = items.length - 1; i >= 0; i--) {\n            const itemRef = itemRefs.current[i];\n            if (itemRef) {\n              if (availableWidth - itemRef.offsetWidth < 0) {\n                newShouldTruncate[i] = true;\n              } else {\n                availableWidth -= itemRef.offsetWidth;\n              }\n            }\n          }\n        }\n\n        setShouldTruncate(newShouldTruncate);\n      }\n    };\n\n    checkOverflow();\n    window.addEventListener('resize', checkOverflow);\n    return () => window.removeEventListener('resize', checkOverflow);\n  }, [items]);\n\n  const renderItem = (item, index) => {\n    const content = (\n      <Text\n        color={item.isCurrentPage ? \"gray.500\" : \"blue.500\"}\n        fontWeight=\"500\"\n        fontSize=\"16px\"\n        whiteSpace=\"nowrap\"\n        overflow=\"hidden\"\n        textOverflow=\"ellipsis\"\n        flexShrink={1}\n        minWidth={0}\n        ref={el => itemRefs.current[index] = el}\n        as={item.isCurrentPage ? \"span\" : Link}\n        href={item.isCurrentPage ? undefined : item.href}\n        _hover={item.isCurrentPage ? undefined : { textDecoration: 'underline' }}\n      >\n        {item.label}\n      </Text>\n    );\n\n    return shouldTruncate[index] ? (\n      <Tooltip key={index} label={item.label} aria-label=\"Full breadcrumb text\">\n        {content}\n      </Tooltip>\n    ) : content;\n  };\n\n  return (\n    <Flex align=\"center\" ml={4} ref={containerRef} overflow=\"hidden\">\n      {items.map((item, index) => (\n        <React.Fragment key={index}>\n          {index > 0 && <ChevronRightIcon mx={2} color=\"gray.500\" flexShrink={0} />}\n          {renderItem(item, index)}\n        </React.Fragment>\n      ))}\n    </Flex>\n  );\n};\n\nexport default Breadcrumbs;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,QAAQ,kBAAkB;AAC5D,SAASC,gBAAgB,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAMC,YAAY,GAAGb,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMc,QAAQ,GAAGd,MAAM,CAAC,EAAE,CAAC;EAC3B,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,MAAMgB,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAIJ,YAAY,CAACK,OAAO,EAAE;QACxB,MAAMC,SAAS,GAAGN,YAAY,CAACK,OAAO;QACtC,IAAIE,UAAU,GAAG,CAAC;QAClB,MAAMC,iBAAiB,GAAG,CAAC,CAAC;;QAE5B;QACAP,QAAQ,CAACI,OAAO,CAACI,OAAO,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;UAC3C,IAAID,OAAO,EAAE;YACX,MAAME,SAAS,GAAGF,OAAO,CAACG,WAAW;YACrC,MAAMC,eAAe,GAAGJ,OAAO,CAACK,WAAW;YAC3CR,UAAU,IAAIK,SAAS;;YAEvB;YACA,IAAIE,eAAe,GAAGF,SAAS,EAAE;cAC/BJ,iBAAiB,CAACG,KAAK,CAAC,GAAG,IAAI;YACjC;UACF;QACF,CAAC,CAAC;;QAEF;QACA,IAAIJ,UAAU,GAAGD,SAAS,CAACO,WAAW,EAAE;UACtC,IAAIG,cAAc,GAAGV,SAAS,CAACO,WAAW;UAC1C,KAAK,IAAII,CAAC,GAAGnB,KAAK,CAACoB,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;YAC1C,MAAMP,OAAO,GAAGT,QAAQ,CAACI,OAAO,CAACY,CAAC,CAAC;YACnC,IAAIP,OAAO,EAAE;cACX,IAAIM,cAAc,GAAGN,OAAO,CAACG,WAAW,GAAG,CAAC,EAAE;gBAC5CL,iBAAiB,CAACS,CAAC,CAAC,GAAG,IAAI;cAC7B,CAAC,MAAM;gBACLD,cAAc,IAAIN,OAAO,CAACG,WAAW;cACvC;YACF;UACF;QACF;QAEAV,iBAAiB,CAACK,iBAAiB,CAAC;MACtC;IACF,CAAC;IAEDJ,aAAa,CAAC,CAAC;IACfe,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEhB,aAAa,CAAC;IAChD,OAAO,MAAMe,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEjB,aAAa,CAAC;EAClE,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EAEX,MAAMwB,UAAU,GAAGA,CAACC,IAAI,EAAEZ,KAAK,KAAK;IAClC,MAAMa,OAAO,gBACX5B,OAAA,CAACL,IAAI;MACHkC,KAAK,EAAEF,IAAI,CAACG,aAAa,GAAG,UAAU,GAAG,UAAW;MACpDC,UAAU,EAAC,KAAK;MAChBC,QAAQ,EAAC,MAAM;MACfC,UAAU,EAAC,QAAQ;MACnBC,QAAQ,EAAC,QAAQ;MACjBC,YAAY,EAAC,UAAU;MACvBC,UAAU,EAAE,CAAE;MACdC,QAAQ,EAAE,CAAE;MACZC,GAAG,EAAEC,EAAE,IAAIlC,QAAQ,CAACI,OAAO,CAACM,KAAK,CAAC,GAAGwB,EAAG;MACxCC,EAAE,EAAEb,IAAI,CAACG,aAAa,GAAG,MAAM,GAAGlC,IAAK;MACvC6C,IAAI,EAAEd,IAAI,CAACG,aAAa,GAAGY,SAAS,GAAGf,IAAI,CAACc,IAAK;MACjDE,MAAM,EAAEhB,IAAI,CAACG,aAAa,GAAGY,SAAS,GAAG;QAAEE,cAAc,EAAE;MAAY,CAAE;MAAAC,QAAA,EAExElB,IAAI,CAACmB;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CACP;IAED,OAAO5C,cAAc,CAACS,KAAK,CAAC,gBAC1Bf,OAAA,CAACH,OAAO;MAAaiD,KAAK,EAAEnB,IAAI,CAACmB,KAAM;MAAC,cAAW,sBAAsB;MAAAD,QAAA,EACtEjB;IAAO,GADIb,KAAK;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CAAC,GACRtB,OAAO;EACb,CAAC;EAED,oBACE5B,OAAA,CAACN,IAAI;IAACyD,KAAK,EAAC,QAAQ;IAACC,EAAE,EAAE,CAAE;IAACd,GAAG,EAAElC,YAAa;IAAC8B,QAAQ,EAAC,QAAQ;IAAAW,QAAA,EAC7D3C,KAAK,CAACmD,GAAG,CAAC,CAAC1B,IAAI,EAAEZ,KAAK,kBACrBf,OAAA,CAACV,KAAK,CAACgE,QAAQ;MAAAT,QAAA,GACZ9B,KAAK,GAAG,CAAC,iBAAIf,OAAA,CAACF,gBAAgB;QAACyD,EAAE,EAAE,CAAE;QAAC1B,KAAK,EAAC,UAAU;QAACO,UAAU,EAAE;MAAE;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACxExB,UAAU,CAACC,IAAI,EAAEZ,KAAK,CAAC;IAAA,GAFLA,KAAK;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACjB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAAC/C,EAAA,CAvFIF,WAAW;AAAAuD,EAAA,GAAXvD,WAAW;AAyFjB,eAAeA,WAAW;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}