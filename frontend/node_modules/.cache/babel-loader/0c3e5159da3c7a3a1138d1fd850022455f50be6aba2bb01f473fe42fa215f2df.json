{"ast":null,"code":"var _jsxFileName = \"/Users/reineirduran/demo-components/frontend/src/components/Breadcrumbs.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Flex, Text, Link, Tooltip } from '@chakra-ui/react';\nimport { ChevronRightIcon } from '@chakra-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Breadcrumbs = ({\n  items\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const itemRefs = useRef([]);\n  const [truncatedItems, setTruncatedItems] = useState([]);\n  useEffect(() => {\n    const checkOverflow = () => {\n      if (containerRef.current) {\n        const container = containerRef.current;\n        let availableWidth = container.offsetWidth;\n        const newTruncatedItems = [];\n\n        // Calculate space needed for all items\n        let totalWidth = 0;\n        itemRefs.current.forEach((itemRef, index) => {\n          if (itemRef) {\n            totalWidth += itemRef.offsetWidth + (index > 0 ? 16 : 0); // 16px for chevron\n          }\n        });\n\n        // If total width exceeds available width, start truncating from the middle\n        if (totalWidth > availableWidth) {\n          let currentWidth = 0;\n          for (let i = 0; i < items.length; i++) {\n            const itemRef = itemRefs.current[i];\n            if (itemRef) {\n              const itemWidth = itemRef.offsetWidth + (i > 0 ? 16 : 0);\n              if (i !== 0 && i !== items.length - 1 && currentWidth + itemWidth > availableWidth / 2) {\n                newTruncatedItems[i] = true;\n                currentWidth += 50; // Approximate width for truncated item\n              } else {\n                currentWidth += itemWidth;\n              }\n            }\n          }\n        }\n        setTruncatedItems(newTruncatedItems);\n      }\n    };\n    checkOverflow();\n    window.addEventListener('resize', checkOverflow);\n    return () => window.removeEventListener('resize', checkOverflow);\n  }, [items]);\n  const renderItem = (item, index) => {\n    const isFirst = index === 0;\n    const isLast = index === items.length - 1;\n    const shouldTruncate = truncatedItems[index];\n    const content = /*#__PURE__*/_jsxDEV(Text, {\n      color: item.isCurrentPage ? \"gray.500\" : \"blue.500\",\n      fontWeight: \"500\",\n      fontSize: \"16px\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      maxWidth: shouldTruncate ? \"50px\" : \"none\",\n      ref: el => itemRefs.current[index] = el,\n      as: item.isCurrentPage ? \"span\" : Link,\n      href: item.isCurrentPage ? undefined : item.href,\n      _hover: item.isCurrentPage ? undefined : {\n        textDecoration: 'underline'\n      },\n      children: shouldTruncate ? item.label.slice(0, 3) + '...' : item.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n    return shouldTruncate ? /*#__PURE__*/_jsxDEV(Tooltip, {\n      label: item.label,\n      \"aria-label\": \"Full breadcrumb text\",\n      children: content\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this) : content;\n  };\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    align: \"center\",\n    ref: containerRef,\n    overflow: \"hidden\",\n    width: \"100%\",\n    children: items.map((item, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [index > 0 && /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n        mx: 1,\n        color: \"gray.500\",\n        flexShrink: 0,\n        boxSize: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this), renderItem(item, index)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Breadcrumbs, \"AQ38Xkxif8K+h67t5I+gD7sfhP8=\");\n_c = Breadcrumbs;\nexport default Breadcrumbs;\nvar _c;\n$RefreshReg$(_c, \"Breadcrumbs\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Flex","Text","Link","Tooltip","ChevronRightIcon","jsxDEV","_jsxDEV","Breadcrumbs","items","_s","containerRef","itemRefs","truncatedItems","setTruncatedItems","checkOverflow","current","container","availableWidth","offsetWidth","newTruncatedItems","totalWidth","forEach","itemRef","index","currentWidth","i","length","itemWidth","window","addEventListener","removeEventListener","renderItem","item","isFirst","isLast","shouldTruncate","content","color","isCurrentPage","fontWeight","fontSize","whiteSpace","overflow","textOverflow","maxWidth","ref","el","as","href","undefined","_hover","textDecoration","children","label","slice","fileName","_jsxFileName","lineNumber","columnNumber","align","width","map","Fragment","mx","flexShrink","boxSize","_c","$RefreshReg$"],"sources":["/Users/reineirduran/demo-components/frontend/src/components/Breadcrumbs.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Flex, Text, Link, Tooltip } from '@chakra-ui/react';\nimport { ChevronRightIcon } from '@chakra-ui/icons';\n\nconst Breadcrumbs = ({ items }) => {\n  const containerRef = useRef(null);\n  const itemRefs = useRef([]);\n  const [truncatedItems, setTruncatedItems] = useState([]);\n\n  useEffect(() => {\n    const checkOverflow = () => {\n      if (containerRef.current) {\n        const container = containerRef.current;\n        let availableWidth = container.offsetWidth;\n        const newTruncatedItems = [];\n\n        // Calculate space needed for all items\n        let totalWidth = 0;\n        itemRefs.current.forEach((itemRef, index) => {\n          if (itemRef) {\n            totalWidth += itemRef.offsetWidth + (index > 0 ? 16 : 0); // 16px for chevron\n          }\n        });\n\n        // If total width exceeds available width, start truncating from the middle\n        if (totalWidth > availableWidth) {\n          let currentWidth = 0;\n          for (let i = 0; i < items.length; i++) {\n            const itemRef = itemRefs.current[i];\n            if (itemRef) {\n              const itemWidth = itemRef.offsetWidth + (i > 0 ? 16 : 0);\n              if (i !== 0 && i !== items.length - 1 && currentWidth + itemWidth > availableWidth / 2) {\n                newTruncatedItems[i] = true;\n                currentWidth += 50; // Approximate width for truncated item\n              } else {\n                currentWidth += itemWidth;\n              }\n            }\n          }\n        }\n\n        setTruncatedItems(newTruncatedItems);\n      }\n    };\n\n    checkOverflow();\n    window.addEventListener('resize', checkOverflow);\n    return () => window.removeEventListener('resize', checkOverflow);\n  }, [items]);\n\n  const renderItem = (item, index) => {\n    const isFirst = index === 0;\n    const isLast = index === items.length - 1;\n    const shouldTruncate = truncatedItems[index];\n\n    const content = (\n      <Text\n        color={item.isCurrentPage ? \"gray.500\" : \"blue.500\"}\n        fontWeight=\"500\"\n        fontSize=\"16px\"\n        whiteSpace=\"nowrap\"\n        overflow=\"hidden\"\n        textOverflow=\"ellipsis\"\n        maxWidth={shouldTruncate ? \"50px\" : \"none\"}\n        ref={el => itemRefs.current[index] = el}\n        as={item.isCurrentPage ? \"span\" : Link}\n        href={item.isCurrentPage ? undefined : item.href}\n        _hover={item.isCurrentPage ? undefined : { textDecoration: 'underline' }}\n      >\n        {shouldTruncate ? item.label.slice(0, 3) + '...' : item.label}\n      </Text>\n    );\n\n    return shouldTruncate ? (\n      <Tooltip key={index} label={item.label} aria-label=\"Full breadcrumb text\">\n        {content}\n      </Tooltip>\n    ) : content;\n  };\n\n  return (\n    <Flex align=\"center\" ref={containerRef} overflow=\"hidden\" width=\"100%\">\n      {items.map((item, index) => (\n        <React.Fragment key={index}>\n          {index > 0 && <ChevronRightIcon mx={1} color=\"gray.500\" flexShrink={0} boxSize={3} />}\n          {renderItem(item, index)}\n        </React.Fragment>\n      ))}\n    </Flex>\n  );\n};\n\nexport default Breadcrumbs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}