[
  {
    "topic": 5,
    "index": 1,
    "url": "https://www.examtopics.com/discussions/microsoft/view/20704-exam-az-202-topic-5-question-4-discussion/",
    "body": "HOTSPOT -<br>You are developing an SMS-based testing solution. The solution sends users a question by using SMS. Early responders may qualify for prizes.<br>Users must respond with an answer choice within 90 seconds. You must be able to track how long it takes each user to respond.<br>You create a durable Azure Function named SendSmsQuizQuestion that uses Twilio to send messages.<br>You need to write the code for MessageQuiz.<br>How should you complete the code? To answer, select the appropriate options in the answer area.<br>NOTE: Each correct selection is worth one point.<br>Hot Area:<br><img src=\"/assets/media/exam-media/02522/0013600001.png\" class=\"in-exam-image\"><br>",
    "options": [],
    "answer": "<img src=\"/assets/media/exam-media/02522/0013800001.png\" class=\"in-exam-image\">",
    "answerDescription": "Box 1: DateTime expiration = context.CurrentUtcDateTime.AddSeconds(90);<br>The user has 90 seconds to respond with the code they received in the SMS message.<br>Box 2:var timeoutTask = context.CreateTimer(expiration, cts.Token);<br>Create a timer.<br>Box 3: if(!timeoutTask.IsCompleted)<br>All pending timers must be complete or canceled before the function exits.<br>References:<br>https://github.com/Azure/azure-functions-durable-extension/blob/master/samples/precompiled/PhoneVerification.cs",
    "votes": [],
    "comments": [
      {
        "date": "2020-05-25T08:09:00.000Z",
        "voteCount": 4,
        "content": "Almost relates to the question and explanation :\n\nhttps://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-phone-verification?tabs=csharp"
      },
      {
        "date": "2020-05-16T12:30:00.000Z",
        "voteCount": 1,
        "content": "Same question is asked in AZ-300 also"
      }
    ],
    "examNameCode": "az-202",
    "topicNumber": "5"
  },
  {
    "topic": 5,
    "index": 2,
    "url": "https://www.examtopics.com/discussions/microsoft/view/25661-exam-az-202-topic-5-question-6-discussion/",
    "body": "HOTSPOT -<br>You are creating an app that uses Event Grid to connect with other services. Your app's event data will be sent to a serverless function that checks compliance.<br>This function is maintained by your company.<br>You write a new event subscription at the scope of your resource. The event must be invalidated after a specific period of time.<br>You need to configure Event Grid to ensure security.<br>What should you implement? To answer, select the appropriate options in the answer area.<br>NOTE: Each correct selection is worth one point.<br>Hot Area:<br><img src=\"/assets/media/exam-media/02522/0014100001.jpg\" class=\"in-exam-image\"><br>",
    "options": [],
    "answer": "<img src=\"/assets/media/exam-media/02522/0014200001.jpg\" class=\"in-exam-image\">",
    "answerDescription": "Box 1: SAS tokens -<br>Custom topics use either Shared Access Signature (SAS) or key authentication. Microsoft recommends SAS, but key authentication provides simple programming, and is compatible with many existing webhook publishers.<br>In this case we need the expiration time provided by SAS tokens.<br><br>Box 2: ValidationCode handshake -<br>Event Grid supports two ways of validating the subscription: ValidationCode handshake (programmatic) and ValidationURL handshake (manual).<br>If you control the source code for your endpoint, this method is recommended.<br>Incorrect Answers:<br>ValidationURL handshake (manual): In certain cases, you can't access the source code of the endpoint to implement the ValidationCode handshake. For example, if you use a third-party service (like Zapier or IFTTT), you can't programmatically respond with the validation code.<br>References:<br>https://docs.microsoft.com/en-us/azure/event-grid/security-authentication",
    "votes": [],
    "comments": [
      {
        "date": "2020-07-13T19:07:00.000Z",
        "voteCount": 2,
        "content": "WebHook Event Delivery = SAS Tokens\nTopic Publishing = Validation Code Handshake\n\nReferences: https://docs.microsoft.com/en-us/azure/event-grid/security-authentication\nSAS tokens: Custom topics use either Shared Access Signature (SAS) or key authentication. Microsoft recommends SAS, but key authentication provides simple programming, and is compatible with many existing webhook publishers. In this case we need the expiration time provided by SAS tokens.\n\nValidationCode Handshake: Event Grid supports two ways of validating the subscription: ValidationCode handshake (programmatic) and ValidationURL handshake (manual). If\nyou control the source code for your endpoint, this method is recommended"
      }
    ],
    "examNameCode": "az-202",
    "topicNumber": "5"
  }
]