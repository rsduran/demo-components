[
  {
    "topic": 18,
    "index": 1,
    "url": "https://www.examtopics.com/discussions/microsoft/view/13262-exam-az-203-topic-18-question-1-discussion/",
    "body": "HOTSPOT -<br>You need to configure retries in the LoadUserDetails function in the Database class without impacting user experience.<br>What code should you insert on line DB07?<br>To answer, select the appropriate options in the answer area.<br>NOTE: Each correct selection is worth one point.<br>Hot Area:<br>",
    "options": [],
    "answer": "Explanation",
    "answerDescription": "Box 1: Policy -<br><br>RetryPolicy retry = Policy -<br>.Handle&lt;HttpRequestException&gt;()<br>.Retry(3);<br>The above example will create a retry policy which will retry up to three times if an action fails with an exception handled by the Policy.<br>Box 2: WaitAndRetryAsync(3,i =&gt; TimeSpan.FromMilliseconds(100* Math.Pow(2,i-1)));<br>A common retry strategy is exponential backoff: this allows for retries to be made initially quickly, but then at progressively longer intervals, to avoid hitting a subsystem with repeated frequent calls if the subsystem may be struggling.<br>Example:<br><br>Policy -<br>.Handle&lt;SomeExceptionType&gt;()<br>.WaitAndRetry(3, retryAttempt =&gt;<br>TimeSpan.FromSeconds(Math.Pow(2, retryAttempt))<br>);<br>References:<br>https://github.com/App-vNext/Polly/wiki/Retry",
    "votes": [],
    "comments": [
      {
        "date": "2020-03-08T11:11:00.000Z",
        "voteCount": 15,
        "content": "Options without answer:\nhttps://www.examtopics.com/assets/media/exam-media/02522/0010300001.jpg"
      },
      {
        "date": "2020-02-25T20:19:00.000Z",
        "voteCount": 10,
        "content": "options\nhttps://www.examtopics.com/assets/media/exam-media/02522/0010400001.jpg"
      },
      {
        "date": "2020-08-17T10:13:00.000Z",
        "voteCount": 1,
        "content": "https://docs.microsoft.com/en-us/azure/architecture/best-practices/retry-service-specific \nsearch for Policy.Handle&lt;Exception&gt;().WaitAndRetryAsync"
      },
      {
        "date": "2020-03-13T21:25:00.000Z",
        "voteCount": 1,
        "content": "It should be Circuit Breaker."
      },
      {
        "date": "2020-03-29T12:48:00.000Z",
        "voteCount": 9,
        "content": "I think - WaitAndRetryAsync(3,i =&gt; TimeSpan.FromMilliseconds(100* Math.Pow(2,i-1))); is correct. \nhttps://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-circuit-breaker-pattern\n\"The Circuit Breaker pattern has a different purpose than the \"Retry pattern\". The \"Retry pattern\" enables an application to retry an operation in the expectation that the operation will eventually succeed. The Circuit Breaker pattern prevents an application from performing an operation that's likely to fail. An application can combine these two patterns. However, the retry logic should be sensitive to any exception returned by the circuit breaker, and it should abandon retry attempts if the circuit breaker indicates that a fault is not transient.\""
      },
      {
        "date": "2020-02-02T01:41:00.000Z",
        "voteCount": 2,
        "content": "https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly"
      }
    ],
    "examNameCode": "az-203",
    "topicNumber": "18"
  }
]